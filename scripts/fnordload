#!/usr/bin/env python

import fnordload
import time
import signal
import sys
import logging
import logging.config
import logging.handlers
import max7301
import upay.common
import upay.client
import sys

from decimal import Decimal

class Exit(Exception):
    @classmethod
    def throw(cls):
        raise cls()

class Fnordload(object):
    def __init__(self, LCDserver = 'localhost', eSSPport = '/dev/ttyACM0',
            cointype = 0.5, code = '00000'):
        self._logger = logging.getLogger(__name__)
        self._lcd = fnordload.LCD(LCDserver)
        self._io_device = max7301.MAX7301()
        self._keypad = fnordload.KeyPad(self._io_device)
        self._note_handler = fnordload.NoteHandler(device = eSSPport)
        self._coin_hopper = fnordload.CoinHopper(cointype, io_device = self._io_device)
        self._ui = fnordload.UI(keypad = self._keypad, lcd = self._lcd)
        self._code = code
        self._setup()

    def _setup(self):
        self._lcd.setup()

    def _run_sub_menu(self, name, menu):
        try:
            while True:
                self._ui.choose(name, menu)
        except Exit:
            pass

    def main(self):
        main_menu = (
            {'name': "Give Change", 'function': self._give_change,      'visible': True},
            {'name': "UPAY",        'function': self._upay_menu,        'visible': True},
            {'name': "Statistics",  'function': self._statistics_menu,  'visible': True},
            {'name': "Manage",      'function': self._manage,           'visible': True},
        )

        while True:
            try:
                self._ui.choose("Fnordload 0.1  Menu", main_menu, timeout = 3600)
            except fnordload.TimeoutError:
                pass

    def _manage(self):
        self._lcd.write("Fnordload MGT  Menu", "", "Enter Code", "             The MGT")
        input = ''

        while True:
            k = self._keypad.get_single_key()
            if k != '#':
                input += str(k)
            else:
                if self._code == input:
                    self._manage_menu()
                else:
                    self._logger.warning('Wrong management menu code entered.')
                    self._lcd.write("Fnordload MGT  Menu", "", "Wrong Code", "             The MGT")
                    time.sleep(5)
                break

    def _manage_menu(self):
        self._logger.info('Entered management menu')
        menu = (
            {'name': "Actions",     'function': self._manage_actions_menu,  'visible': True },
            {'name': "Devices",     'function': self._manage_devices_menu,  'visible': True },
            {'name': "Exit",        'function': lambda: Exit.throw(),       'visible': False, 'key': '*'},
        )
        self._run_sub_menu("Fnordload MGT  Menu", menu)

    def _manage_actions_menu(self):
        menu = (
            {'name': "Refill Hopper",   'function': self._refill_hopper,    'visible': True },
            {'name': "Exit",            'function': lambda: Exit.throw(),   'visible': False, 'key': '*'},
        )
        self._run_sub_menu("Fnordload ACTN  Menu", menu)

    def _manage_devices_menu(self):
        menu = (
            {'name': "Hopper",      'function': self._manage_hopper_menu,       'visible': True },
            {'name': "Validator",   'function': self._manage_validator_menu,    'visible': True },
            {'name': "Printer",     'function': self._not_implemented,          'visible': True },
            {'name': "Exit",        'function': lambda: Exit.throw(),           'visible': False, 'key': '*'},
        )
        self._run_sub_menu("Fnordload DEVS  Menu", menu)

    def _manage_hopper_menu(self):
        menu = (
            {'name': "Load Coins",  'function': self._load_coins,       'visible': True },
            {'name': "Give Coins",  'function': self._give_coins,       'visible': True },
            {'name': "Exit",        'function': lambda: Exit.throw(),   'visible': False, 'key': '*'},
        )
        self._run_sub_menu("Fnordload HOPPR Menu", menu)

    def _manage_validator_menu(self):
        menu = (
            {'name': "Load Notes",  'function': self._load_notes,       'visible': True },
            {'name': "Get Notes",   'function': self._remove_notes,     'visible': True },
            {'name': "Exit",        'function': lambda: Exit.throw(),   'visible': False, 'key': '*'},
        )
        self._run_sub_menu("Fnordload VLDTR Menu", menu)

    def _upay_menu(self):
        menu = (
            {'name': "Show Balance",    'function': self._upay_show_balance,    'visible': True},
            {'name': "Get Tokens",      'function': self._upay_get_tokens,      'visible': True},
            {'name': "Normalize Purse", 'function': self._not_implemented,      'visible': True},
            {'name': "Exit",            'function': lambda: None,               'visible': False, 'key': '*'},
        )
        self._ui.choose("Fnordload UPAY  Menu", menu)

    def _statistics_menu(self):
        menu = (
            {'name': "Account Balances",    'function': self._statistics_show_account_balances, 'visible': True},
            {'name': "UPAY",                'function': self._statistics_upay,                  'visible': True},
            {'name': "Exit",                'function': lambda: Exit.throw(),                   'visible': False, 'key': '*'},
        )
        self._run_sub_menu("Fnordload STATS Menu", menu)

    def _not_implemented(self):
        self._lcd.write("Fnordload", "", "Not Yet Implemented", "             The MGT")
        time.sleep(5)

    def _refill_hopper(self):
        pass

    def _choose_account(self, header):
        upay_balance = self._note_handler.account_value('upay')
        change_balance = self._note_handler.account_value('change')
        self._lcd.write(header,
                        "Choose account",
                        "1: UPAY (% 7.02f)" % upay_balance,
                        "2: Change(% 7.02f)" % change_balance)

        key = self._keypad.get_single_key(accepted_keys = [1, 2, '*'])
        if key == '*':
            return

        account_name = 'upay'
        account_name_ui = 'UPAY'
        if key == 2:
            account_name = 'change'
            account_name_ui = 'Change'

        self._logger.info("Account %s selected" % account_name)
        return (account_name, account_name_ui)

    def _load_notes(self):
        self._logger.info("Entered load notes menu")
        account_name, account_name_ui = self._choose_account("Fnordload VLDTR Menu")

        balance = self._note_handler.account_value(account_name)
        amount = self._ui.input_number(0,
                lambda amount: self._lcd.write(
                        "Fnordload VLDTR Menu",
                        "Balance: % 7.02f" % balance,
                        "Amount: % 5.0f Euro" % amount, ""))

        if amount > 0:
            self._lcd.write("Fnordload VLDTR Menu",
                            "Balance: % 7.02f" % balance,
                            "Amount: % 5.0f Euro" % amount,
                            "PROCESSING...")
            self._note_handler.load(account_name, amount);
            balance = self._note_handler.account_value(account_name)
            self._lcd.write("Fnordload VLDTR Menu",
                            "%s Balance:" % account_name_ui,
                            "% 7.02f Euro" % balance, "")
            self._keypad.get_single_key(accepted_keys = ['*'])

    def _remove_notes(self):
        self._logger.info("Entered remove notes menu")
        account_name, account_name_ui = self._choose_account("Fnordload VLDTR Menu")

        balance = self._note_handler.account_value(account_name)
        amount = self._ui.input_number(0,
                lambda amount: self._lcd.write(
                        "Fnordload VLDTR Menu",
                        "Balance: % 7.02f" % balance,
                        "Amount: % 5.0f Euro" % amount, ""))

        if amount > balance:
            self._lcd.write("Fnordload VLDTR Menu",
                            "",
                            "Amount Not Available", "")
            time.sleep(5)
            return

        if amount > 0:
            self._lcd.write("Fnordload VLDTR Menu",
                            "Balance: % 7.02f" % balance,
                            "Amount: % 5.0f Euro" % amount,
                            "PROCESSING...")
            self._note_handler.payout(account_name, amount);
            balance = self._note_handler.account_value(account_name)
            self._lcd.write("Fnordload VLDTR Menu",
                            "%s Balance:" % account_name_ui,
                            "% 7.02f Euro" % balance, "")
            self._keypad.get_single_key(accepted_keys = ['*'])

    def _statistics_show_account_balances(self):
        self._lcd.write("Fnordload STAT Menu",
                "Hopper: %d Coins" % self._coin_hopper.coin_level,
                "UPAY  : % 7.02f Euro" % self._note_handler.account_value("upay"),
                "Change: % 7.02f Euro" % self._note_handler.account_value("change"))
        self._keypad.get_single_key(accepted_keys = ['*'])

    def _statistics_upay(self):
        pass

    def _load_coins(self):
        self._logger.info("Entered load coins menu")
        coins = self._ui.input_number(0, lambda coins: self._lcd.write("Fnordload MGT  Menu", "Load Coins", "Amount: %d Coins" % coins, ""))

        self._lcd.write("Fnordload MGT  Menu", "Load Coins", "Amount: %d Coins" % coins, "WRITING")
        self._coin_hopper.increase_coin_level(coins)
        self._lcd.write("Fnordload MGT  Menu", "Load Coins", "Amount: %d Coins" % coins, "DONE")
        time.sleep(2)
        self._lcd.write("Fnordload MGT  Menu", "New Coin Level", "%d Coins" % self._coin_hopper.coin_level, "")
        time.sleep(2)

    def _give_coins(self):
        self._logger.info("Entered give coins menu")
        coins = self._coin_hopper.coin_level
        coins = self._ui.input_number(coins, lambda coins: self._lcd.write("Fnordload MGT  Menu", "Give Coins", "Amount: %d Coins" % coins, ""))

        self._lcd.write("Fnordload MGT  Menu", "Give Coins", "Amount: %d Coins" % coins, "Please Wait")
        self._coin_hopper.payout(coins * self._coin_hopper.coin_type)
        self._lcd.write("Fnordload MGT  Menu", "Give Coins", "Amount: %d Coins" % coins, "DONE")
        time.sleep(2)
        self._lcd.write("Fnordload MGT  Menu", "New Coin Level", "%d Coins" % self._coin_hopper.coin_level, "")
        time.sleep(2)

    def _upay_show_balance(self):
        token_reader = upay.common.USBTokenReader()
        t0 = time.time()

        self._lcd.write("Fnordload UPAY", "", "Please insert your", "USB drive")

        tokens = []
        while time.time() < t0 + 30:
            try:
                tokens = token_reader.read_tokens(
                            found_medium_callback =
                                lambda x: self._lcd.write("Fnordload UPAY", "", "Reading USB drive", ""))
                break
            except upay.common.NoTokensAvailableError:
                time.sleep(1)

        if not tokens:
            self._lcd.write("Fnordload UPAY", "", "No valid purse found", "")
            time.sleep(5)
            return

        self._lcd.write("Fnordload UPAY", "", "Validating tokens", "")
        token_client = upay.client.TokenClient()
        tokens = token_client.validate_tokens(tokens)
        value = sum([token.value for token in tokens])

        self._lcd.write("Fnordload UPAY", "", "Read %d tokens" % len(tokens), "Value: %.2f Euro" % value)
        time.sleep(5)

    def _upay_get_tokens(self):
        self._logger.info("Entered get tokens menu")
        self._lcd.write("Fnordload UPAY", "", "Reading internal", "purse...")
        local_tokens = upay.common.read_tokens_from_file('local-purse', max_tokens = 100, max_size = 300 * 1024)
        token_client = upay.client.TokenClient()

        self._lcd.write("Fnordload UPAY", "", "Validating internal", "purse...")
        local_tokens = token_client.validate_tokens(local_tokens)

        available_amount = sum([t.value for t in local_tokens])
        self._note_handler.set_max_accepted_value(available_amount)

        accepted_values = [str(x) for x in self._note_handler.get_accepted_values()]

        if (len(accepted_values) == 0):
            self._logger.warning("No tokens available")
            self._lcd.write("Fnordload UPAY", "No tokens available", "", "             The MGT")
            time.sleep(5)
            return

        class local:
            purse_path = None
        def found_usb_drive(path):
            self._lcd.write("Fnordload UPAY", "", "Reading USB drive", "")
            local.purse_path = path

        token_reader = upay.common.USBTokenReader()
        t0 = time.time()
        self._lcd.write("Fnordload UPAY", "", "Please insert your", "USB drive")

        tokens = []
        while time.time() < t0 + 30:
            try:
                tokens = token_reader.read_tokens(found_medium_callback = found_usb_drive)
            except upay.common.NoTokensAvailableError:
                time.sleep(1)

            if local.purse_path:
                break

        if not local.purse_path:
            self._logger.info("No purse file found")
            self._lcd.write("Fnordload UPAY", "", "No purse file found", "")
            time.sleep(5)
            return

        self._lcd.write("Fnordload UPAY", "Accepting (Euro):", ", ".join(accepted_values),"        Insert money")

        try:
            amount = self._note_handler.read_note('upay')
        except fnordload.InvalidNoteError:
            self._lcd.rejected_note()
            time.sleep(2)
            return

        new_token_values = [Decimal(0.5)] * (amount * 2)
        new_tokens = token_client.create_tokens(new_token_values)
        local_tokens = local_tokens[0:amount * 2]

        token_client.transform_tokens(local_tokens, new_tokens)

        with open(local.purse_path, 'a') as f:
            f.writelines([str(token)+'\n' for token in new_tokens])

        self._upay_show_balance()

    def _give_change(self):
        self._logger.info("Entered give change menu")
        self._note_handler.set_max_accepted_value(
                self._coin_hopper.coin_level *
                self._coin_hopper.coin_type)

        accepted_values = self._note_handler.get_accepted_values()
        self._lcd.show_accepted_values(accepted_values)

        if not accepted_values:
            self._logger.warning("Not enough coins available")
            time.sleep(5)
            return

        try:
            amount = self._note_handler.read_note('change', read_note_callback=self._lcd.thinking)
            self._lcd.payout_in_progress()
            self._coin_hopper.payout(amount)
        except fnordload.InvalidNoteError:
            self._lcd.rejected_note()
            time.sleep(2)
            self._give_change()
        except fnordload.TimeoutError:
            pass

    def exit_handler(self, signal, frame):
        self._coin_hopper.reset()
        self._note_handler.exit()

        sys.exit(0)

if __name__ == "__main__":
    logging.config.fileConfig(sys.argv[2])
    logger = logging.getLogger("fnordload")
    logger.info('Starting fnordload')

    try:
        fl = Fnordload(code = sys.argv[1])
        signal.signal(signal.SIGINT, fl.exit_handler)

        while True:
            fl.main()
    except Exception, e:
        logger.exception(e)
        import traceback
        traceback.print_exc()
        sys.exit(1)

    sys.exit(0)


